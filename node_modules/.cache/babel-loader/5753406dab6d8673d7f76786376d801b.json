{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _save = _interopRequireDefault(require(\"../operations/save\"));\n\nvar _restore = _interopRequireDefault(require(\"../operations/restore\"));\n\nvar drawImage = function drawImage(ctx) {\n  return function (node) {\n    var _node$props = node.props,\n        x = _node$props.x,\n        y = _node$props.y;\n    var _node$style = node.style,\n        width = _node$style.width,\n        height = _node$style.height,\n        opacity = _node$style.opacity;\n    var paddingTop = node.box.paddingLeft || 0;\n    var paddingLeft = node.box.paddingLeft || 0;\n\n    if (node.image.data) {\n      if (width !== 0 && height !== 0) {\n        ctx.fillOpacity(opacity || 1).image(node.image.data, x + paddingLeft, y + paddingTop, {\n          width: width,\n          height: height\n        });\n      } else {\n        console.warn(\"Image with src '\" + node.props.href + \"' skipped due to invalid dimensions\");\n      }\n    }\n\n    return node;\n  };\n};\n\nvar renderImage = function renderImage(ctx, node) {\n  R.compose((0, _restore.default)(ctx), drawImage(ctx), (0, _save.default)(ctx))(node);\n  return node;\n};\n\nvar _default = R.curryN(2, renderImage);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}