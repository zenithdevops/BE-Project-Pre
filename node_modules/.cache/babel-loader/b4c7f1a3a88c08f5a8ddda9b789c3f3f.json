{"ast":null,"code":"import arcToCurve from 'svg-arc-to-cubic-bezier';\nexport default function normalize(path) {\n  // init state\n  var prev;\n  var result = [];\n  var bezierX = 0;\n  var bezierY = 0;\n  var startX = 0;\n  var startY = 0;\n  var quadX = null;\n  var quadY = null;\n  var x = 0;\n  var y = 0;\n\n  for (var i = 0, len = path.length; i < len; i++) {\n    var seg = path[i];\n    var command = seg[0];\n\n    switch (command) {\n      case 'M':\n        startX = seg[1];\n        startY = seg[2];\n        break;\n\n      case 'A':\n        var curves = arcToCurve({\n          px: x,\n          py: y,\n          cx: seg[6],\n          cy: seg[7],\n          rx: seg[1],\n          ry: seg[2],\n          xAxisRotation: seg[3],\n          largeArcFlag: seg[4],\n          sweepFlag: seg[5]\n        }); // null-curves\n\n        if (!curves.length) continue;\n\n        for (var j = 0, c; j < curves.length; j++) {\n          c = curves[j];\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y];\n          if (j < curves.length - 1) result.push(seg);\n        }\n\n        break;\n\n      case 'S':\n        // default control point\n        var cx = x;\n        var cy = y;\n\n        if (prev == 'C' || prev == 'S') {\n          cx += cx - bezierX; // reflect the previous command's control\n\n          cy += cy - bezierY; // point relative to the current point\n        }\n\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]];\n        break;\n\n      case 'T':\n        if (prev == 'Q' || prev == 'T') {\n          quadX = x * 2 - quadX; // as with 'S' reflect previous control point\n\n          quadY = y * 2 - quadY;\n        } else {\n          quadX = x;\n          quadY = y;\n        }\n\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2]);\n        break;\n\n      case 'Q':\n        quadX = seg[1];\n        quadY = seg[2];\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4]);\n        break;\n\n      case 'L':\n        seg = line(x, y, seg[1], seg[2]);\n        break;\n\n      case 'H':\n        seg = line(x, y, seg[1], y);\n        break;\n\n      case 'V':\n        seg = line(x, y, x, seg[1]);\n        break;\n\n      case 'Z':\n        seg = line(x, y, startX, startY);\n        break;\n    } // update state\n\n\n    prev = command;\n    x = seg[seg.length - 2];\n    y = seg[seg.length - 1];\n\n    if (seg.length > 4) {\n      bezierX = seg[seg.length - 4];\n      bezierY = seg[seg.length - 3];\n    } else {\n      bezierX = x;\n      bezierY = y;\n    }\n\n    result.push(seg);\n  }\n\n  return result;\n}\n\nfunction line(x1, y1, x2, y2) {\n  return ['C', x1, y1, x2, y2, x2, y2];\n}\n\nfunction quadratic(x1, y1, cx, cy, x2, y2) {\n  return ['C', x1 / 3 + 2 / 3 * cx, y1 / 3 + 2 / 3 * cy, x2 / 3 + 2 / 3 * cx, y2 / 3 + 2 / 3 * cy, x2, y2];\n}","map":null,"metadata":{},"sourceType":"module"}