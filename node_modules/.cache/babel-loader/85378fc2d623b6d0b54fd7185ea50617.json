{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _image = _interopRequireDefault(require(\"@react-pdf/image\"));\n\nvar _getSource = _interopRequireDefault(require(\"./getSource\"));\n\nvar _resolveSource = _interopRequireDefault(require(\"./resolveSource\"));\n/* eslint-disable no-param-reassign */\n\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param {Object} node\n */\n\n\nvar fetchImage = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(node) {\n    var src, cache, source;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            src = (0, _getSource.default)(node);\n            cache = node.props.cache;\n\n            if (src) {\n              _context.next = 5;\n              break;\n            }\n\n            console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n            return _context.abrupt(\"return\");\n\n          case 5:\n            _context.prev = 5;\n            _context.next = 8;\n            return (0, _resolveSource.default)(src);\n\n          case 8:\n            source = _context.sent;\n\n            if (source) {\n              _context.next = 11;\n              break;\n            }\n\n            throw new Error(\"Image's \\\"src\\\" or \\\"source\\\" prop returned \" + source);\n\n          case 11:\n            _context.next = 13;\n            return (0, _image.default)(source, {\n              cache: cache\n            });\n\n          case 13:\n            node.image = _context.sent;\n            _context.next = 20;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](5);\n            node.image = {\n              width: 0,\n              height: 0\n            };\n            console.warn(_context.t0.message);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 16]]);\n  }));\n\n  return function fetchImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _default = fetchImage;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}