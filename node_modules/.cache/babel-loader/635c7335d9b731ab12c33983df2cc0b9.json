{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _createForOfIteratorHelperLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\"));\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _getFactors = _interopRequireDefault(require(\"./getFactors\"));\n\nvar _getDistances = _interopRequireDefault(require(\"./getDistances\"));\n\nvar _advanceWidth = _interopRequireDefault(require(\"../../attributedString/advanceWidth\"));\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable no-restricted-syntax */\n\n/**\n * Adjust run positions by given distances\n *\n * @param {Array} distances\n * @param {Object} line\n * @returns {Object} line\n */\n\n\nvar justifyLine = function justifyLine(distances, line) {\n  var index = 0;\n\n  for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(line.runs), _step; !(_step = _iterator()).done;) {\n    var run = _step.value;\n\n    for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(run.positions), _step2; !(_step2 = _iterator2()).done;) {\n      var position = _step2.value;\n      position.xAdvance += distances[index++];\n    }\n  }\n\n  return line;\n};\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * //TODO: Make it immutable\n *\n * @param {Object} layout options\n * @param {Object} line\n * @returns {Object} line\n */\n\n\nvar justification = function justification(options, line) {\n  var gap = line.box.width - (0, _advanceWidth.default)(line);\n  if (gap === 0) return; // Exact fit\n\n  var factors = (0, _getFactors.default)(gap, line, options);\n  var distances = (0, _getDistances.default)(gap, factors);\n  return justifyLine(distances, line);\n};\n\nvar _default = R.curryN(2, justification);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}