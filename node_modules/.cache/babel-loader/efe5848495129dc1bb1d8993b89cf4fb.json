{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _sort = _interopRequireDefault(require(\"./sort\"));\n\nvar _isEmpty = _interopRequireDefault(require(\"./isEmpty\"));\n\nvar sortPoints = function sortPoints(a, b) {\n  return a[1] - b[1] || a[3] - b[3];\n};\n\nvar mergeAttributes = function mergeAttributes(key, left, right) {\n  return key === 'attributes' ? R.merge(left, right) : right;\n};\n\nvar generatePoints = R.o(R.sort(sortPoints), R.addIndex(R.chain)(function (run, i) {\n  return [['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]];\n}));\nvar flattenEmptyRuns = R.compose(R.map(R.reduce(R.mergeDeepWithKey(mergeAttributes), {})), R.groupWith(R.eqProps('start')));\n\nvar flattenRegularRuns = function flattenRegularRuns(runs) {\n  var res = [];\n  var points = generatePoints(runs);\n  var start = -1;\n  var attrs = {};\n  var stack = [];\n\n  for (var i = 0; i < points.length; i += 1) {\n    var _points$i = points[i],\n        type = _points$i[0],\n        offset = _points$i[1],\n        attributes = _points$i[2];\n\n    if (start !== -1 && start < offset) {\n      res.push({\n        start: start,\n        end: offset,\n        attributes: attrs\n      });\n    }\n\n    if (type === 'start') {\n      stack.push(attributes);\n      attrs = R.merge(attrs, attributes);\n    } else {\n      attrs = {};\n\n      for (var j = 0; j < stack.length; j += 1) {\n        if (stack[j] === attributes) {\n          // eslint-disable-next-line no-plusplus\n          stack.splice(j--, 1);\n        } else {\n          attrs = R.merge(attrs, stack[j]);\n        }\n      }\n    }\n\n    start = offset;\n  }\n\n  return res;\n};\n/**\n * Flatten many runs\n *\n * @param  {Array}  runs\n * @return {Array} flatten runs\n */\n\n\nvar flatten = function flatten(runs) {\n  if (runs === void 0) {\n    runs = [];\n  }\n\n  return R.compose(_sort.default, R.apply(R.useWith(R.concat, [flattenEmptyRuns, flattenRegularRuns])), R.partition(_isEmpty.default))(runs);\n};\n\nvar _default = flatten;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}