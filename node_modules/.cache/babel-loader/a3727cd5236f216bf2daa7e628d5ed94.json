{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _parse = _interopRequireDefault(require(\"postcss-value-parser/lib/parse\"));\n\nvar _unit = _interopRequireDefault(require(\"postcss-value-parser/lib/unit\"));\n/* eslint-disable no-plusplus */\n\n\nvar BOX_MODEL_UNITS = 'px,in,mm,cm,pt,%,vw,vh';\n\nvar logError = function logError(style, value) {\n  console.error(\"\\n    @react-pdf/stylesheet parsing error:\\n\\n    \" + style + \": \" + value + \",\\n    \" + ' '.repeat(style.length + 2) + \"^\\n    Unsupported \" + style + \" value format\\n  \");\n};\n\nvar expandBoxModel = function expandBoxModel(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      expandsTo = _ref.expandsTo,\n      _ref$maxValues = _ref.maxValues,\n      maxValues = _ref$maxValues === void 0 ? 1 : _ref$maxValues,\n      _ref$autoSupported = _ref.autoSupported,\n      autoSupported = _ref$autoSupported === void 0 ? false : _ref$autoSupported;\n\n  return function (model, value) {\n    var _ref2;\n\n    var nodes = (0, _parse.default)(\"\" + value);\n    var parts = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i]; // value contains `calc`, `url` or other css function\n      // `,`, `/` or strings that unsupported by margin and padding\n\n      if (node.type === 'function' || node.type === 'string' || node.type === 'div') {\n        logError(model, value);\n        return {};\n      }\n\n      if (node.type === 'word') {\n        if (node.value === 'auto' && autoSupported) {\n          parts.push(node.value);\n        } else {\n          var result = (0, _unit.default)(node.value); // when unit isn't specified this condition is true\n\n          if (result && BOX_MODEL_UNITS.includes(result.unit)) {\n            parts.push(node.value);\n          } else {\n            logError(model, value);\n            return {};\n          }\n        }\n      }\n    } // checks that we have enough parsed values\n\n\n    if (parts.length > maxValues) {\n      logError(model, value);\n      return {};\n    }\n\n    var first = parts[0];\n\n    if (expandsTo) {\n      var second = parts[1] || parts[0];\n      var third = parts[2] || parts[0];\n      var fourth = parts[3] || parts[1] || parts[0];\n      return expandsTo({\n        first: first,\n        second: second,\n        third: third,\n        fourth: fourth\n      });\n    }\n\n    return _ref2 = {}, _ref2[model] = first, _ref2;\n  };\n};\n\nvar _default = expandBoxModel;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}