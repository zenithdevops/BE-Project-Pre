{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _save = _interopRequireDefault(require(\"../operations/save\"));\n\nvar _restore = _interopRequireDefault(require(\"../operations/restore\"));\n\nvar _clipNode = _interopRequireDefault(require(\"../operations/clipNode\"));\n\nvar _resolveObjectFit2 = _interopRequireDefault(require(\"../utils/resolveObjectFit\"));\n\nvar drawImage = function drawImage(ctx) {\n  return function (node) {\n    var _node$style, _node$style2, _node$style3, _node$style4;\n\n    var _node$box = node.box,\n        left = _node$box.left,\n        top = _node$box.top;\n    var opacity = (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity;\n    var objectFit = (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.objectFit;\n    var objectPositionX = (_node$style3 = node.style) === null || _node$style3 === void 0 ? void 0 : _node$style3.objectPositionX;\n    var objectPositionY = (_node$style4 = node.style) === null || _node$style4 === void 0 ? void 0 : _node$style4.objectPositionY;\n    var paddingTop = node.box.paddingTop || 0;\n    var paddingRight = node.box.paddingRight || 0;\n    var paddingBottom = node.box.paddingBottom || 0;\n    var paddingLeft = node.box.paddingLeft || 0;\n\n    var _resolveObjectFit = (0, _resolveObjectFit2.default)(objectFit, node.box.width - paddingLeft - paddingRight, node.box.height - paddingTop - paddingBottom, node.image.width, node.image.height, objectPositionX, objectPositionY),\n        width = _resolveObjectFit.width,\n        height = _resolveObjectFit.height,\n        xOffset = _resolveObjectFit.xOffset,\n        yOffset = _resolveObjectFit.yOffset;\n\n    if (node.image.data) {\n      if (width !== 0 && height !== 0) {\n        ctx.fillOpacity(opacity || 1).image(node.image.data, left + paddingLeft + xOffset, top + paddingTop + yOffset, {\n          width: width,\n          height: height\n        });\n      } else {\n        console.warn(\"Image with src '\" + node.props.src + \"' skipped due to invalid dimensions\");\n      }\n    }\n\n    return node;\n  };\n};\n\nvar renderImage = function renderImage(ctx, node) {\n  R.compose((0, _restore.default)(ctx), drawImage(ctx), (0, _clipNode.default)(ctx), (0, _save.default)(ctx))(node);\n  return node;\n};\n\nvar _default = R.curryN(2, renderImage);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}