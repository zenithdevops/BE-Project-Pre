{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.resolvePageDimensions = exports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yoga = _interopRequireDefault(require(\"@react-pdf/yoga\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _getMargin = _interopRequireDefault(require(\"../node/getMargin\"));\n\nvar _getPadding = _interopRequireDefault(require(\"../node/getPadding\"));\n\nvar _getPosition = _interopRequireDefault(require(\"../node/getPosition\"));\n\nvar _getDimension = _interopRequireDefault(require(\"../node/getDimension\"));\n\nvar _getBorderWidth = _interopRequireDefault(require(\"../node/getBorderWidth\"));\n\nvar _setDisplay = _interopRequireDefault(require(\"../node/setDisplay\"));\n\nvar _setOverflow = _interopRequireDefault(require(\"../node/setOverflow\"));\n\nvar _setFlexWrap = _interopRequireDefault(require(\"../node/setFlexWrap\"));\n\nvar _setFlexGrow = _interopRequireDefault(require(\"../node/setFlexGrow\"));\n\nvar _setFlexBasis = _interopRequireDefault(require(\"../node/setFlexBasis\"));\n\nvar _setAlignSelf = _interopRequireDefault(require(\"../node/setAlignSelf\"));\n\nvar _setAlignItems = _interopRequireDefault(require(\"../node/setAlignItems\"));\n\nvar _setFlexShrink = _interopRequireDefault(require(\"../node/setFlexShrink\"));\n\nvar _setAspectRatio = _interopRequireDefault(require(\"../node/setAspectRatio\"));\n\nvar _setAlignContent = _interopRequireDefault(require(\"../node/setAlignContent\"));\n\nvar _setPositionType = _interopRequireDefault(require(\"../node/setPositionType\"));\n\nvar _setFlexDirection = _interopRequireDefault(require(\"../node/setFlexDirection\"));\n\nvar _setJustifyContent = _interopRequireDefault(require(\"../node/setJustifyContent\"));\n\nvar _setMargin = require(\"../node/setMargin\");\n\nvar _setPadding = require(\"../node/setPadding\");\n\nvar _setBorderWidth = require(\"../node/setBorderWidth\");\n\nvar _setPosition = require(\"../node/setPosition\");\n\nvar _setDimension = require(\"../node/setDimension\");\n\nvar _measureSvg = _interopRequireDefault(require(\"../svg/measureSvg\"));\n\nvar _measureText = _interopRequireDefault(require(\"../text/measureText\"));\n\nvar _measureImage = _interopRequireDefault(require(\"../image/measureImage\"));\n\nvar _measureCanvas = _interopRequireDefault(require(\"../canvas/measureCanvas\"));\n\nvar YOGA_NODE = '_yogaNode';\n\nvar YOGA_CONFIG = _yoga.default.Config.create();\n\nYOGA_CONFIG.setPointScaleFactor(0);\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNote = isType(P.Note);\nvar isPage = isType(P.Page);\nvar isImage = isType(P.Image);\nvar isCanvas = isType(P.Canvas);\nvar isTextInstance = isType(P.TextInstance);\n\nvar setNodeHeight = function setNodeHeight(node) {\n  var value = isPage(node) ? node.box.height : node.style.height;\n  return (0, _setDimension.setHeight)(value);\n};\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nvar setYogaValues = R.tap(function (node) {\n  R.compose(setNodeHeight(node), (0, _setDimension.setWidth)(node.style.width), (0, _setDimension.setMinWidth)(node.style.minWidth), (0, _setDimension.setMaxWidth)(node.style.maxWidth), (0, _setDimension.setMinHeight)(node.style.minHeight), (0, _setDimension.setMaxHeight)(node.style.maxHeight), (0, _setMargin.setMarginTop)(node.style.marginTop), (0, _setMargin.setMarginRight)(node.style.marginRight), (0, _setMargin.setMarginBottom)(node.style.marginBottom), (0, _setMargin.setMarginLeft)(node.style.marginLeft), (0, _setPadding.setPaddingTop)(node.style.paddingTop), (0, _setPadding.setPaddingRight)(node.style.paddingRight), (0, _setPadding.setPaddingBottom)(node.style.paddingBottom), (0, _setPadding.setPaddingLeft)(node.style.paddingLeft), (0, _setPositionType.default)(node.style.position), (0, _setPosition.setPositionTop)(node.style.top), (0, _setPosition.setPositionRight)(node.style.right), (0, _setPosition.setPositionBottom)(node.style.bottom), (0, _setPosition.setPositionLeft)(node.style.left), (0, _setBorderWidth.setBorderTop)(node.style.borderTopWidth), (0, _setBorderWidth.setBorderRight)(node.style.borderRightWidth), (0, _setBorderWidth.setBorderBottom)(node.style.borderBottomWidth), (0, _setBorderWidth.setBorderLeft)(node.style.borderLeftWidth), (0, _setDisplay.default)(node.style.display), (0, _setFlexDirection.default)(node.style.flexDirection), (0, _setAlignSelf.default)(node.style.alignSelf), (0, _setAlignContent.default)(node.style.alignContent), (0, _setAlignItems.default)(node.style.alignItems), (0, _setJustifyContent.default)(node.style.justifyContent), (0, _setFlexWrap.default)(node.style.flexWrap), (0, _setOverflow.default)(node.style.overflow), (0, _setAspectRatio.default)(node.style.aspectRatio), (0, _setFlexBasis.default)(node.style.flexBasis), (0, _setFlexGrow.default)(node.style.flexGrow), (0, _setFlexShrink.default)(node.style.flexShrink))(node);\n});\n/**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent\n * @param {Object} node\n * @param {Object} node\n */\n\nvar insertYogaNodes = function insertYogaNodes(parent) {\n  return R.tap(function (child) {\n    return parent.insertChild(child[YOGA_NODE], parent.getChildCount());\n  });\n};\n\nvar setMeasureFunc = function setMeasureFunc(page, fontStore) {\n  return function (node) {\n    var yogaNode = node[YOGA_NODE];\n\n    if (isText(node)) {\n      yogaNode.setMeasureFunc((0, _measureText.default)(page, node, fontStore));\n    }\n\n    if (isImage(node)) {\n      yogaNode.setMeasureFunc((0, _measureImage.default)(page, node));\n    }\n\n    if (isCanvas(node)) {\n      yogaNode.setMeasureFunc((0, _measureCanvas.default)(page, node));\n    }\n\n    if (isSvg(node)) {\n      yogaNode.setMeasureFunc((0, _measureSvg.default)(page, node));\n    }\n\n    return node;\n  };\n};\n\nvar isNotText = R.complement(isText);\nvar isNotNote = R.complement(isNote);\nvar isNotSvg = R.complement(isSvg);\nvar isNotTextInstance = R.complement(isTextInstance);\nvar isLayoutElement = R.allPass([isNotText, isNotNote, isNotSvg]);\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n\nvar createYogaNodes = function createYogaNodes(page, fontStore) {\n  return function (node) {\n    var yogaNode = _yoga.default.Node.createWithConfig(YOGA_CONFIG);\n\n    return R.compose(setMeasureFunc(page, fontStore), R.when(isLayoutElement, R.evolve({\n      children: R.map(R.compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore)))\n    })), setYogaValues, R.assoc(YOGA_NODE, yogaNode))(node);\n  };\n};\n/**\n * Performs yoga calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nvar calculateLayout = function calculateLayout(page) {\n  page[YOGA_NODE].calculateLayout();\n  return page;\n};\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */\n\n\nvar persistDimensions = function persistDimensions(node) {\n  return R.evolve({\n    children: R.map(R.when(isNotTextInstance, persistDimensions)),\n    box: R.always(R.mergeAll([(0, _getPadding.default)(node), (0, _getMargin.default)(node), (0, _getBorderWidth.default)(node), (0, _getPosition.default)(node), (0, _getDimension.default)(node)]))\n  })(node);\n};\n/**\n * Removes yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\n\n\nvar destroyYogaNodes = function destroyYogaNodes(node) {\n  return R.compose(R.dissoc(YOGA_NODE), R.evolve({\n    children: R.map(destroyYogaNodes)\n  }))(node);\n};\n/**\n * Free yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\n\n\nvar freeYogaNodes = function freeYogaNodes(node) {\n  if (node[YOGA_NODE]) node[YOGA_NODE].freeRecursive();\n  return node;\n};\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */\n\n\nvar resolvePageDimensions = function resolvePageDimensions(page, fontStore) {\n  return R.ifElse(R.isNil, R.always(null), R.compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore)))(page);\n};\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} root object\n * @returns {Object} root object with correct 'box' layout attributes\n */\n\n\nexports.resolvePageDimensions = resolvePageDimensions;\n\nvar resolveDimensions = function resolveDimensions(node, fontStore) {\n  var mapChild = function mapChild(child) {\n    return resolvePageDimensions(child, fontStore);\n  };\n\n  return R.evolve({\n    children: R.map(mapChild)\n  })(node);\n};\n\nvar _default = resolveDimensions;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}