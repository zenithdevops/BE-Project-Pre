{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport * as primitives from '@react-pdf/primitives';\nexport * from '@react-pdf/primitives';\nimport queue from 'queue';\nimport React, { useRef, useState, useEffect } from 'react';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport BlobStream from 'blob-stream';\nimport FontStore from '@react-pdf/font';\nimport renderPDF from '@react-pdf/render';\nimport PDFDocument from '@react-pdf/pdfkit';\nimport layoutDocument from '@react-pdf/layout';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport ReactFiberReconciler from 'react-reconciler';\nimport { unstable_scheduleCallback, unstable_cancelCallback } from 'scheduler';\n/* eslint-disable no-continue */\n\n/**\n * Checks if two sets of props are equal (recursively)\n *\n * @param {Object} props A\n * @param {Object} props B\n * @returns {Boolean} props equals?\n *\n */\n\nvar propsEqual = function propsEqual(a, b) {\n  var oldPropsKeys = Object.keys(a);\n  var newPropsKeys = Object.keys(b);\n\n  if (oldPropsKeys.length !== newPropsKeys.length) {\n    return false;\n  }\n\n  for (var i = 0; i < oldPropsKeys.length; i += 1) {\n    var propName = oldPropsKeys[i];\n\n    if (propName === 'render' && !a[propName] !== !b[propName]) {\n      return false;\n    }\n\n    if (propName !== 'children' && a[propName] !== b[propName]) {\n      if (typeof a[propName] === 'object' && typeof b[propName] === 'object' && propsEqual(a[propName], b[propName])) {\n        continue;\n      }\n\n      return false;\n    }\n\n    if (propName === 'children' && (typeof a[propName] === 'string' || typeof b[propName] === 'string')) {\n      return a[propName] === b[propName];\n    }\n  }\n\n  return true;\n};\n\nvar _excluded$1 = [\"style\", \"children\"],\n    _excluded2 = [\"style\"];\nvar emptyObject = {};\n\nvar createRenderer = function createRenderer(_ref) {\n  var _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n  return ReactFiberReconciler({\n    schedulePassiveEffects: unstable_scheduleCallback,\n    cancelPassiveEffects: unstable_cancelCallback,\n    supportsMutation: true,\n    isPrimaryRenderer: false,\n    warnsIfNotActing: false,\n    appendInitialChild: function appendInitialChild(parentInstance, child) {\n      parentInstance.children.push(child);\n    },\n    createInstance: function createInstance(type, _ref2) {\n      var style = _ref2.style;\n      _ref2.children;\n\n      var props = _objectWithoutPropertiesLoose(_ref2, _excluded$1);\n\n      return {\n        type: type,\n        box: {},\n        style: style || {},\n        props: props || {},\n        children: []\n      };\n    },\n    createTextInstance: function createTextInstance(text, rootContainerInstance) {\n      return {\n        type: 'TEXT_INSTANCE',\n        value: text\n      };\n    },\n    finalizeInitialChildren: function finalizeInitialChildren(element, type, props) {\n      return false;\n    },\n    getPublicInstance: function getPublicInstance(instance) {\n      return instance;\n    },\n    prepareForCommit: function prepareForCommit() {// Noop\n    },\n    clearContainer: function clearContainer() {// Noop\n    },\n    prepareUpdate: function prepareUpdate(element, type, oldProps, newProps) {\n      return !propsEqual(oldProps, newProps);\n    },\n    resetAfterCommit: onChange,\n    resetTextContent: function resetTextContent(element) {// Noop\n    },\n    getRootHostContext: function getRootHostContext() {\n      return emptyObject;\n    },\n    getChildHostContext: function getChildHostContext() {\n      return emptyObject;\n    },\n    shouldSetTextContent: function shouldSetTextContent(type, props) {\n      return false;\n    },\n    now: Date.now,\n    useSyncScheduling: true,\n    appendChild: function appendChild(parentInstance, child) {\n      parentInstance.children.push(child);\n    },\n    appendChildToContainer: function appendChildToContainer(parentInstance, child) {\n      if (parentInstance.type === 'ROOT') {\n        parentInstance.document = child;\n      } else {\n        parentInstance.children.push(child);\n      }\n    },\n    insertBefore: function insertBefore(parentInstance, child, beforeChild) {\n      var _parentInstance$child;\n\n      var index = (_parentInstance$child = parentInstance.children) === null || _parentInstance$child === void 0 ? void 0 : _parentInstance$child.indexOf(beforeChild);\n      if (index === undefined) return;\n      if (index !== -1 && child) parentInstance.children.splice(index, 0, child);\n    },\n    removeChild: function removeChild(parentInstance, child) {\n      var _parentInstance$child2;\n\n      var index = (_parentInstance$child2 = parentInstance.children) === null || _parentInstance$child2 === void 0 ? void 0 : _parentInstance$child2.indexOf(child);\n      if (index === undefined) return;\n      if (index !== -1) parentInstance.children.splice(index, 1);\n    },\n    removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {\n      var _parentInstance$child3;\n\n      var index = (_parentInstance$child3 = parentInstance.children) === null || _parentInstance$child3 === void 0 ? void 0 : _parentInstance$child3.indexOf(child);\n      if (index === undefined) return;\n      if (index !== -1) parentInstance.children.splice(index, 1);\n    },\n    commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {\n      textInstance.value = newText;\n    },\n    commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n      var style = newProps.style,\n          props = _objectWithoutPropertiesLoose(newProps, _excluded2);\n\n      instance.props = props;\n      instance.style = style;\n    }\n  });\n};\n\nvar version = \"2.1.1\";\nvar fontStore = new FontStore(); // We must keep a single renderer instance, otherwise React will complain\n\nvar renderer; // The pdf instance acts as an event emitter for DOM usage.\n// We only want to trigger an update when PDF content changes\n\nvar events = {};\n\nvar pdf = function pdf(initialValue) {\n  var onChange = function onChange() {\n    var _events$change;\n\n    var listeners = ((_events$change = events.change) === null || _events$change === void 0 ? void 0 : _events$change.slice()) || [];\n\n    for (var i = 0; i < listeners.length; i += 1) {\n      listeners[i]();\n    }\n  };\n\n  var container = {\n    type: 'ROOT',\n    document: null\n  };\n  renderer = renderer || createRenderer({\n    onChange: onChange\n  });\n  var mountNode = renderer.createContainer(container);\n\n  var updateContainer = function updateContainer(doc) {\n    renderer.updateContainer(doc, mountNode, null);\n  };\n\n  if (initialValue) updateContainer(initialValue);\n\n  var render = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(compress) {\n      var props, pdfVersion, language, ctx, layout;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (compress === void 0) {\n                compress = true;\n              }\n\n              props = container.document.props || {};\n              pdfVersion = props.pdfVersion, language = props.language;\n              ctx = new PDFDocument({\n                compress: compress,\n                pdfVersion: pdfVersion,\n                lang: language,\n                displayTitle: true,\n                autoFirstPage: false\n              });\n              _context.next = 6;\n              return layoutDocument(container.document, fontStore);\n\n            case 6:\n              layout = _context.sent;\n              return _context.abrupt(\"return\", renderPDF(ctx, layout));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function render(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var callOnRender = function callOnRender(params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (container.document.props.onRender) {\n      container.document.props.onRender(params);\n    }\n  };\n\n  var toBlob = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var instance, stream;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return render();\n\n            case 2:\n              instance = _context2.sent;\n              stream = instance.pipe(BlobStream());\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                stream.on('finish', function () {\n                  try {\n                    var blob = stream.toBlob('application/pdf');\n                    callOnRender({\n                      blob: blob\n                    });\n                    resolve(blob);\n                  } catch (error) {\n                    reject(error);\n                  }\n                });\n                stream.on('error', reject);\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function toBlob() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var toBuffer = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              callOnRender();\n              return _context3.abrupt(\"return\", render());\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function toBuffer() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var toString = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var result, instance;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              result = '';\n              _context4.next = 3;\n              return render(false);\n\n            case 3:\n              instance = _context4.sent;\n              return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                try {\n                  instance.on('data', function (buffer) {\n                    result += buffer;\n                  });\n                  instance.on('end', function () {\n                    callOnRender();\n                    resolve(result);\n                  });\n                } catch (error) {\n                  reject(error);\n                }\n              }));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function toString() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var on = function on(event, listener) {\n    if (!events[event]) events[event] = [];\n    events[event].push(listener);\n  };\n\n  var removeListener = function removeListener(event, listener) {\n    if (!events[event]) return;\n    var idx = events[event].indexOf(listener);\n    if (idx > -1) events[event].splice(idx, 1);\n  };\n\n  return {\n    on: on,\n    container: container,\n    toBlob: toBlob,\n    toBuffer: toBuffer,\n    toString: toString,\n    removeListener: removeListener,\n    updateContainer: updateContainer\n  };\n};\n\nvar Font = fontStore;\nvar StyleSheet = {\n  create: function create(s) {\n    return s;\n  }\n};\n\nvar usePDF = function usePDF(_ref) {\n  var document = _ref.document;\n  var pdfInstance = useRef(null);\n\n  var _useState = useState({\n    url: null,\n    blob: null,\n    error: null,\n    loading: false\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // Setup rendering queue\n\n\n  useEffect(function () {\n    var renderQueue = queue({\n      autostart: true,\n      concurrency: 1\n    });\n\n    var queueDocumentRender = function queueDocumentRender() {\n      setState(function (prev) {\n        return _extends({}, prev, {\n          loading: true\n        });\n      });\n      renderQueue.splice(0, renderQueue.length, function () {\n        return state.error ? Promise.resolve() : pdfInstance.current.toBlob();\n      });\n    };\n\n    var onRenderFailed = function onRenderFailed(error) {\n      console.error(error);\n      setState(function (prev) {\n        return _extends({}, prev, {\n          error: error\n        });\n      });\n    };\n\n    var onRenderSuccessful = function onRenderSuccessful(blob) {\n      setState({\n        blob: blob,\n        error: null,\n        loading: false,\n        url: URL.createObjectURL(blob)\n      });\n    };\n\n    pdfInstance.current = pdf();\n    pdfInstance.current.on('change', queueDocumentRender);\n    pdfInstance.current.updateContainer(document);\n    renderQueue.on('error', onRenderFailed);\n    renderQueue.on('success', onRenderSuccessful);\n    return function () {\n      renderQueue.end();\n      pdfInstance.current.removeListener('change', queueDocumentRender);\n    };\n  }, []); // Revoke old unused url instances\n\n  useEffect(function () {\n    return function () {\n      if (state.url) {\n        URL.revokeObjectURL(state.url);\n      }\n    };\n  }, [state.url]);\n\n  var update = function update() {\n    pdfInstance.current.updateContainer(document);\n  };\n\n  return [state, update];\n};\n\nvar _excluded = [\"title\", \"style\", \"className\", \"children\", \"innerRef\", \"showToolbar\"];\n\nvar PDFViewer = function PDFViewer(_ref) {\n  var title = _ref.title,\n      style = _ref.style,\n      className = _ref.className,\n      children = _ref.children,\n      innerRef = _ref.innerRef,\n      _ref$showToolbar = _ref.showToolbar,\n      showToolbar = _ref$showToolbar === void 0 ? true : _ref$showToolbar,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var _usePDF = usePDF({\n    document: children\n  }),\n      instance = _usePDF[0],\n      updateInstance = _usePDF[1];\n\n  useEffect(updateInstance, [children]);\n  var src = instance.url ? instance.url + \"#toolbar=\" + (showToolbar ? 1 : 0) : null;\n  return /*#__PURE__*/React.createElement(\"iframe\", _extends({\n    src: src,\n    title: title,\n    ref: innerRef,\n    style: style,\n    className: className\n  }, props));\n};\n/* eslint-disable no-console */\n\n\nvar BlobProvider = function BlobProvider(_ref) {\n  var doc = _ref.document,\n      children = _ref.children;\n\n  var _usePDF = usePDF({\n    document: doc\n  }),\n      instance = _usePDF[0],\n      updateInstance = _usePDF[1];\n\n  useEffect(updateInstance, [doc]);\n\n  if (!doc) {\n    console.warn('You should pass a valid document to BlobProvider');\n    return null;\n  }\n\n  return children(instance);\n};\n/* eslint-disable no-console */\n\n\nvar PDFDownloadLink = function PDFDownloadLink(_ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      className = _ref.className,\n      doc = _ref.document,\n      _ref$fileName = _ref.fileName,\n      fileName = _ref$fileName === void 0 ? 'document.pdf' : _ref$fileName;\n\n  var _usePDF = usePDF({\n    document: doc\n  }),\n      instance = _usePDF[0],\n      updateInstance = _usePDF[1];\n\n  useEffect(updateInstance, [children]);\n\n  if (!doc) {\n    console.warn('You should pass a valid document to PDFDownloadLink');\n    return null;\n  }\n\n  var handleDownloadIE = function handleDownloadIE() {\n    if (window.navigator.msSaveBlob) {\n      // IE\n      window.navigator.msSaveBlob(instance.blob, fileName);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"a\", {\n    style: style,\n    href: instance.url,\n    download: fileName,\n    className: className,\n    onClick: handleDownloadIE\n  }, typeof children === 'function' ? children(instance) : children);\n};\n\nvar throwEnvironmentError = function throwEnvironmentError(name) {\n  throw new Error(name + \" is a Node specific API. You're either using this method in a browser, or your bundler is not loading react-pdf from the appropriate web build.\");\n};\n\nvar renderToStream = function renderToStream() {\n  throwEnvironmentError('renderToStream');\n};\n\nvar renderToString = function renderToString() {\n  throwEnvironmentError('renderToString');\n};\n\nvar renderToFile = function renderToFile() {\n  throwEnvironmentError('renderToFile');\n};\n\nvar render = function render() {\n  throwEnvironmentError('render');\n};\n\nvar index = _extends({\n  pdf: pdf,\n  usePDF: usePDF,\n  Font: Font,\n  version: version,\n  StyleSheet: StyleSheet,\n  PDFViewer: PDFViewer,\n  BlobProvider: BlobProvider,\n  PDFDownloadLink: PDFDownloadLink,\n  renderToStream: renderToStream,\n  renderToString: renderToString,\n  renderToFile: renderToFile,\n  render: render\n}, primitives);\n\nexport { BlobProvider, Font, PDFDownloadLink, PDFViewer, StyleSheet, createRenderer, index as default, pdf, render, renderToFile, renderToStream, renderToString, usePDF, version };","map":null,"metadata":{},"sourceType":"module"}