{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _renderSvg = _interopRequireDefault(require(\"./renderSvg\"));\n\nvar _renderText = _interopRequireDefault(require(\"./renderText\"));\n\nvar _renderPage = _interopRequireDefault(require(\"./renderPage\"));\n\nvar _renderNote = _interopRequireDefault(require(\"./renderNote\"));\n\nvar _renderImage = _interopRequireDefault(require(\"./renderImage\"));\n\nvar _renderDebug = _interopRequireDefault(require(\"./renderDebug\"));\n\nvar _renderCanvas = _interopRequireDefault(require(\"./renderCanvas\"));\n\nvar _renderBorders = _interopRequireDefault(require(\"./renderBorders\"));\n\nvar _renderBackground = _interopRequireDefault(require(\"./renderBackground\"));\n\nvar _isSvg = _interopRequireDefault(require(\"../utils/isSvg\"));\n\nvar _isLink = _interopRequireDefault(require(\"../utils/isLink\"));\n\nvar _isPage = _interopRequireDefault(require(\"../utils/isPage\"));\n\nvar _isNote = _interopRequireDefault(require(\"../utils/isNote\"));\n\nvar _isText = _interopRequireDefault(require(\"../utils/isText\"));\n\nvar _isImage = _interopRequireDefault(require(\"../utils/isImage\"));\n\nvar _isCanvas = _interopRequireDefault(require(\"../utils/isCanvas\"));\n\nvar _save = _interopRequireDefault(require(\"../operations/save\"));\n\nvar _setLink = _interopRequireDefault(require(\"../operations/setLink\"));\n\nvar _restore = _interopRequireDefault(require(\"../operations/restore\"));\n\nvar _clipNode = _interopRequireDefault(require(\"../operations/clipNode\"));\n\nvar _transform = _interopRequireDefault(require(\"../operations/transform\"));\n\nvar _setDestination = _interopRequireDefault(require(\"../operations/setDestination\"));\n\nvar shouldRenderChildren = function shouldRenderChildren(v) {\n  return !(0, _isText.default)(v) && !(0, _isSvg.default)(v);\n};\n\nvar isOverflowHidden = R.pathEq(['style', 'overflow'], 'hidden');\n\nvar renderChildren = function renderChildren(ctx) {\n  return function (node) {\n    (0, _save.default)(ctx, node);\n\n    if (node.box) {\n      ctx.translate(node.box.left, node.box.top);\n    }\n\n    var children = node.children || [];\n    var renderChild = renderNode(ctx);\n    children.forEach(renderChild);\n    (0, _restore.default)(ctx, node);\n    return node;\n  };\n};\n\nvar renderNode = function renderNode(ctx) {\n  return function (node) {\n    return R.compose((0, _restore.default)(ctx), (0, _renderDebug.default)(ctx), (0, _setDestination.default)(ctx), R.when(shouldRenderChildren, renderChildren(ctx)), R.when(_isLink.default, (0, _setLink.default)(ctx)), R.cond([[_isText.default, (0, _renderText.default)(ctx)], [_isNote.default, (0, _renderNote.default)(ctx)], [_isImage.default, (0, _renderImage.default)(ctx)], [_isCanvas.default, (0, _renderCanvas.default)(ctx)], [_isSvg.default, (0, _renderSvg.default)(ctx)], [R.T, R.identity]]), (0, _renderBorders.default)(ctx), (0, _renderBackground.default)(ctx), (0, _transform.default)(ctx), R.when(isOverflowHidden, (0, _clipNode.default)(ctx)), (0, _save.default)(ctx), R.when(_isPage.default, (0, _renderPage.default)(ctx)))(node);\n  };\n};\n\nvar _default = renderNode;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}