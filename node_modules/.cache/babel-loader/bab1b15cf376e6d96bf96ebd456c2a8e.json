{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _save = _interopRequireDefault(require(\"../operations/save\"));\n\nvar _restore = _interopRequireDefault(require(\"../operations/restore\"));\n\nvar _clipNode = _interopRequireDefault(require(\"../operations/clipNode\"));\n\nvar _parseColor = _interopRequireDefault(require(\"../utils/parseColor\"));\n\nvar drawBackground = function drawBackground(ctx, node) {\n  if (node.box && node.style.backgroundColor) {\n    var _node$style;\n\n    var _node$box = node.box,\n        top = _node$box.top,\n        left = _node$box.left,\n        width = _node$box.width,\n        height = _node$box.height;\n    var color = (0, _parseColor.default)(node.style.backgroundColor);\n    var nodeOpacity = R.isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity) ? 1 : node.style.opacity;\n    var opacity = Math.min(color.opacity, nodeOpacity);\n    ctx.fillOpacity(opacity).fillColor(color.value).rect(left, top, width, height).fill();\n  }\n\n  return node;\n};\n\nvar renderBackground = function renderBackground(ctx, node) {\n  var _node$style2;\n\n  var hasBackground = !!node.box && !!((_node$style2 = node.style) !== null && _node$style2 !== void 0 && _node$style2.backgroundColor);\n\n  if (hasBackground) {\n    (0, _save.default)(ctx, node);\n    (0, _clipNode.default)(ctx, node);\n    drawBackground(ctx, node);\n    (0, _restore.default)(ctx, node);\n  }\n\n  return node;\n};\n\nvar _default = R.curryN(2, renderBackground);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}