{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nvar getProp = function getProp(d, p, v) {\n  return R.pathOr(d, ['props', p], v);\n};\n\nvar renderRect = function renderRect(ctx) {\n  return function (node) {\n    var x = getProp(0, 'x', node);\n    var y = getProp(0, 'y', node);\n    var rx = getProp(0, 'rx', node);\n    var ry = getProp(0, 'ry', node);\n    var width = getProp(0, 'width', node);\n    var height = getProp(0, 'height', node);\n    if (!width || !height) return node;\n\n    if (rx && ry) {\n      var krx = rx * KAPPA;\n      var kry = ry * KAPPA;\n      ctx.moveTo(x + rx, y);\n      ctx.lineTo(x - rx + width, y);\n      ctx.bezierCurveTo(x - rx + width + krx, y, x + width, y + ry - kry, x + width, y + ry);\n      ctx.lineTo(x + width, y + height - ry);\n      ctx.bezierCurveTo(x + width, y + height - ry + kry, x - rx + width + krx, y + height, x - rx + width, y + height);\n      ctx.lineTo(x + rx, y + height);\n      ctx.bezierCurveTo(x + rx - krx, y + height, x, y + height - ry + kry, x, y + height - ry);\n      ctx.lineTo(x, y + ry);\n      ctx.bezierCurveTo(x, y + ry - kry, x + rx - krx, y, x + rx, y);\n    } else {\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + width, y);\n      ctx.lineTo(x + width, y + height);\n      ctx.lineTo(x, y + height);\n    }\n\n    ctx.closePath();\n    return node;\n  };\n};\n\nvar _default = renderRect;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}