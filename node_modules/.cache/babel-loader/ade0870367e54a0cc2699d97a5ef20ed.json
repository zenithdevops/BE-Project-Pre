{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar zero = R.always(0);\nvar getTop = R.pathOr(0, ['box', 'top']);\nvar hasFixedHeight = R.hasPath(['style', 'height']);\n\nvar subtractHeight = function subtractHeight(value) {\n  return R.o(R.subtract(R.__, value), R.path(['box', 'height']));\n};\n\nvar splitNode = function splitNode(node, height) {\n  if (!node) return [null, null];\n  var nodeTop = getTop(node); // TODO: We should keep style untouched\n\n  var current = R.evolve({\n    style: R.evolve({\n      marginBottom: zero,\n      paddingBottom: zero,\n      borderBottomWidth: zero,\n      borderBottomLeftRadius: zero,\n      borderBottomRightRadius: zero\n    }),\n    box: {\n      borderBottomWidth: zero\n    }\n  })(node); // TODO: force height without style mutation\n\n  current.style.height = height - nodeTop;\n  var nextHeight = R.ifElse(hasFixedHeight, subtractHeight(height - nodeTop), R.always(null))(node); // TODO: We should keep style untouched\n\n  var next = R.evolve({\n    style: R.evolve({\n      marginTop: zero,\n      paddingTop: zero,\n      borderTopWidth: zero,\n      borderTopLeftRadius: zero,\n      borderTopRightRadius: zero\n    }),\n    box: {\n      top: zero,\n      borderTopWidth: zero\n    }\n  })(node); // TODO: force height without style mutation\n\n  if (nextHeight) {\n    next.style.height = nextHeight;\n  }\n\n  return [current, next];\n};\n\nvar _default = splitNode;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}